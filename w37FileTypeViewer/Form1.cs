using System;
using System.IO;
using System.Windows.Forms; // Necessary for Form, TextBox, MessageBox, etc.
using System.Drawing; // Necessary for System.Drawing.Size

namespace W37FileViewer // Ensure this namespace matches your project's default namespace
{
    public partial class Form1 : Form // 'partial' keyword allows the class to be split across multiple files (e.g., Form1.Designer.cs)
    {
        // Public property to hold the path of the file to be loaded.
        // This property is set by the Program.cs file when the application starts with a file argument.
        public string FileToLoad { get; set; } // <--- THIS PROPERTY IS CRUCIAL AND MUST BE PRESENT!

        // Constructor for Form1. This is called when an instance of Form1 is created.
        public Form1()
        {
            // InitializeComponent() is a method typically generated by the Visual Studio designer.
            // It sets up all the controls (like buttons, textboxes) that you drag onto your form in the designer.
            InitializeComponent(); // This method is defined in Form1.Designer.cs

            // Set the initial title of the form window.
            this.Text = "W37 File Viewer";
            // Set a default size for the form when it first appears.
            this.Size = new System.Drawing.Size(800, 600);
            // Ensure the form opens in the center of the screen.
            this.StartPosition = FormStartPosition.CenterScreen;

            // Call a custom method to create and configure the TextBox control.
            InitializeTextBox();

            // Attach the Form1_Load event handler.
            // This event fires just before the form is displayed for the first time.
            this.Load += new EventHandler(Form1_Load);
        }

        /// <summary>
        /// Creates and configures the TextBox control that will display the file content.
        /// </summary>
        private void InitializeTextBox()
        {
            // Create a new instance of a TextBox control.
            TextBox fileContentTextBox = new TextBox();
            // Assign a name to the TextBox for easier reference in code (e.g., using this.Controls["name"]).
            fileContentTextBox.Name = "fileContentTextBox";
            // Allow the TextBox to display multiple lines of text.
            fileContentTextBox.Multiline = true;
            // Add both horizontal and vertical scrollbars if the content overflows.
            fileContentTextBox.ScrollBars = ScrollBars.Both;
            // Make the TextBox read-only, as it's intended for viewing, not editing.
            fileContentTextBox.ReadOnly = true;
            // Make the TextBox fill the entire area of the form.
            fileContentTextBox.Dock = DockStyle.Fill;

            // Add the newly created TextBox to the form's collection of controls.
            this.Controls.Add(fileContentTextBox);
        }

        /// <summary>
        /// Event handler for when the form loads. This is where the file content is read and displayed.
        /// </summary>
        private void Form1_Load(object sender, EventArgs e)
        {
            // Check if a file path was successfully passed to the form.
            if (!string.IsNullOrEmpty(FileToLoad))
            {
                try
                {
                    // Read all text from the specified file into a string.
                    string content = File.ReadAllText(FileToLoad);

                    // Find the TextBox control by its name and cast it back to a TextBox.
                    TextBox fileContentTextBox = this.Controls["fileContentTextBox"] as TextBox;
                    if (fileContentTextBox != null)
                    {
                        // Set the text of the TextBox to the content read from the file.
                        fileContentTextBox.Text = content;
                        // Update the form's title to include the name of the opened file.
                        this.Text = $"W37 File Viewer - {Path.GetFileName(FileToLoad)}";
                    }
                }
                catch (Exception ex)
                {
                    // If an error occurs during file reading (e.g., file permissions), display an error message.
                    MessageBox.Show($"Error reading file:\n{ex.Message}",
                                    "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    // You could uncomment the line below if you want the form to close on error.
                    // this.Close();
                }
            }
            else
            {
                // If no file was specified (e.g., the app was launched directly without a file),
                // display a helpful message in the TextBox.
                TextBox fileContentTextBox = this.Controls["fileContentTextBox"] as TextBox;
                if (fileContentTextBox != null)
                {
                    fileContentTextBox.Text = "No .w37 file specified or loaded. You can associate this application with .w37 files to open them automatically.";
                }
            }
        }
    }
}